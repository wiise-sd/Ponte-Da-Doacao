// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doador {
  id        String   @id @default(uuid())
  nome      String
  email     String   @unique
  senha String
  telefone  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doacoes   Doacao[]
}

model Instituicao {
  id          String    @id @default(uuid())
  nome        String
  email       String    @unique
  senha   String
  cnpj        String    @unique
  telefone    String
  descricao   String?
  logoUrl     String?
  status      StatusInstituicao  @default(PENDENTE)
  enderecos   Endereco[]
  necessidades Necessidade[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Categoria {
  id          Int       @id @default(autoincrement())
  nome        String    @unique
  slug        String    @unique
  descricao   String?
  necessidades Necessidade[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Endereco {
  id          String    @id @default(uuid())
  instituicao Instituicao @relation(fields: [instituicaoId], references: [id], onDelete: Cascade)
  instituicaoId String
  cep         String
  rua         String
  numero      String
  bairro      String
  cidade      String
  estado      String
  complemento String?
  isPrincipal Boolean   @default(true)
  latitude    Float?    
  longitude   Float?    
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Necessidade {
  id                  String            @id @default(uuid())
  instituicao         Instituicao       @relation(fields: [instituicaoId], references: [id], onDelete: Cascade)
  instituicaoId       String
  categoria           Categoria?        @relation(fields: [categoriaId], references: [id], onDelete: SetNull)
  categoriaId         Int?
  titulo              String
  descricao           String
  status              StatusNecessidade @default(ATIVA)
  quantidadeSolicitada Int
  quantidadeRecebida  Int               @default(0)
  unidadeMedida       String?
  prioridade          Int               @default(0)
  dataLimite          DateTime?
  doacoes             Doacao[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Doacao {
  id              String        @id @default(uuid())
  necessidade     Necessidade   @relation(fields: [necessidadeId], references: [id], onDelete: Cascade)
  necessidadeId   String
  doador          Doador?       @relation(fields: [doadorId], references: [id], onDelete: SetNull)
  doadorId        String?
  quantidadeDoada Int
  status          StatusDoacao  @default(AGENDADA)
  dataEntrega     DateTime?
  observacoes     String?       
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum StatusInstituicao {
  PENDENTE
  ATIVO
  INATIVO
}

enum StatusNecessidade {
  ATIVA
  PAUSADA
  CONCLUIDA
}

enum StatusDoacao {
  AGENDADA
  ENTREGUE
  CANCELADA
}